from rouge import Rouge

candidate = ['i am a student from xx school']  # 预测摘要, 可以是列表也可以是句子
reference = ['i am a student from school on china'] #真实摘要
def calulate_rouge(candidate, reference):
    rouge = Rouge()
    scores = rouge.get_scores(candidate, reference)
    return scores
def calculate_selfBleu(sentences):
    '''
    sentences - list of sentences generated by NLG system
    '''
    rough_scores = []
    for i, sentence in enumerate(sentences):
        sentence_scores = []
        # Exclude the current sentence from the rest
        remaining_sentences = [s for j, s in enumerate(sentences) if j != i]
        for sen in remaining_sentences:
            score = calulate_rouge(sentence, sen)
            sentence_scores.append(score)
        bleu = get_bleu_score(sentence, remaining_sentences)
        bleu_scores.append(bleu)

    return np.mean(bleu_scores)




def test_our_method():
    file_list = [f"/data1/rzw/CODE/proxy-tuning/results/alpaca_farm/base_prompt/predictions_all.jsonl"]
    for file in file_list:
        print(file)
        data = load_json(file)
        scores = []
        # 确保数据格式正确，将数据转换为需要的格式
        for i in range(100):
            responses = []
            for j in range(5):
                responses.append(data[100*j+i]["output"])
                #question = data[100*j+i]["instruction"]
                #print(question)
                #print("#######")
            score = calculate_selfBleu(responses)
            scores.append(score)
        # for item in data:
        #     formatted_data.append({
        #         "response": item["output"]  # 从jsonl文件中提取instruction字段
        #     })
        print(len(scores))
        avg_score = np.mean(scores)
        print(avg_score)
        return avg_score



print(rouge_score[0]["rouge-1"])
print(rouge_score[0]["rouge-2"])
print(rouge_score[0]["rouge-l"])